syntax = "proto3";

package vdp.usage.v1alpha;

// Protobuf standard
import "google/protobuf/timestamp.proto";

// Google API
import "google/api/resource.proto";
import "google/api/field_behavior.proto";

import "vdp/mgmt/v1alpha/mgmt.proto";

// Session represents a unique session whenever a new instance of VDP service
// gets started. The usage server returns a token that should be used as part of
// the challenge when sending a report with data collected from this session
message Session {
  option (google.api.resource) = {
    type : "api.instill.tech/Session"
    pattern : "sessions/{session}"
  };

  // Service enumerates the services to collect data from
  enum Service {
    // Service: UNSPECIFIED
    SERVICE_UNSPECIFIED = 0;
    // Service: MGMT
    SERVICE_MGMT = 1;
    // Service: CONNECTOR
    SERVICE_CONNECTOR = 2;
    // Service: MODEL
    SERVICE_MODEL = 3;
    // Service: PIPELINE
    SERVICE_PIPELINE = 4;
  }

  // Resource name in the format of 'sessions/uid'
  string name = 1 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Resource UUID
  string uid = 2 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // name of the service to collect data from
  Service service = 3 [ (google.api.field_behavior) = REQUIRED ];
  // Session env, e.g., 'os', 'cloud'
  string env = 4 [ (google.api.field_behavior) = REQUIRED ];
  // Version of the service
  string version = 5 [ (google.api.field_behavior) = REQUIRED ];
  // Architecture of the system
  string arch = 6 [ (google.api.field_behavior) = REQUIRED ];
  // Operating system
  string os = 7 [ (google.api.field_behavior) = REQUIRED ];
  // Session service uptime
  int64 uptime = 8 [ (google.api.field_behavior) = REQUIRED ];
  // Report time
  google.protobuf.Timestamp report_time = 9
      [ (google.api.field_behavior) = REQUIRED ];
  // Token to send report. The token is generated by the server and sent to
  // the client. Client needs to use the token to send report to the server.
  string token = 10 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Session creation time
  google.protobuf.Timestamp create_time = 11
      [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Session update time
  google.protobuf.Timestamp update_time = 12
      [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

// Management service usage data
message MgmtUsageData {
  // Repeated user usage data
  repeated mgmt.v1alpha.User usages = 1;
}

// Connector service usage data
message ConnectorUsageData {
  // Per user usage data in the connector service
  message UserUsageData {
    // User UUID
    string user_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
    // Number of source connectors with 'connected' state
    int64 source_connector_connected_num = 2
        [ (google.api.field_behavior) = REQUIRED ];
    // Definition IDs of the connected source connectors. Element in the list
    // should not be duplicated.
    repeated string source_connector_definition_ids = 3
        [ (google.api.field_behavior) = REQUIRED ];
    // Number of destination connectors with 'connected' state
    int64 destination_connector_connected_num = 4
        [ (google.api.field_behavior) = REQUIRED ];
    // Definition IDs of the connected destination connectors. Element in the
    // list should not be duplicated.
    repeated string destination_connector_definition_ids = 5
        [ (google.api.field_behavior) = REQUIRED ];
  }
  // Usage data of all users in the connector service
  repeated UserUsageData usages = 1;
}

// Model service usage data
message ModelUsageData {
  // Per user usage data in the model service
  message UserUsageData {
    // User UUID
    string user_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
    // Number of model instances with 'online' state
    int64 instance_online_num = 2 [ (google.api.field_behavior) = REQUIRED ];
    // Definition IDs of the online model instances. Element in the list
    // should not be duplicated.
    repeated string model_definition_ids = 3
        [ (google.api.field_behavior) = REQUIRED ];
    // Number of processed images via model instance testing operations
    int64 test_image_num = 4 [ (google.api.field_behavior) = REQUIRED ];
  }
  // Usage data of all users in the model service
  repeated UserUsageData usages = 1;
}

// Pipeline service usage data
message PipelineUsageData {
  // Per user usage data in the pipeline service
  message UserUsageData {
    // User UUID
    string user_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipelines with 'active' state
    int64 active_num = 2 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipelines with 'active' state and 'async' mode
    int64 async_active_num = 3 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipelines with 'active' state and 'sync' mode
    int64 sync_active_num = 4 [ (google.api.field_behavior) = REQUIRED ];
    // Number of processed images via pipeline triggering operations
    int64 trigger_image_num = 5 [ (google.api.field_behavior) = REQUIRED ];
  }
  // Usage data of all users in the pipeline service
  repeated UserUsageData usages = 1;
}

// SessionReport represents a report to be sent to the server that includes the
// usage data of a session
message SessionReport {
  // Session uid
  string session_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
  // Session token
  string token = 2 [ (google.api.field_behavior) = REQUIRED ];
  // Proof-of-work See https://en.wikipedia.org/wiki/Proof_of_work
  string pow = 3 [ (google.api.field_behavior) = REQUIRED ];
  // Session
  Session session = 4 [ (google.api.field_behavior) = REQUIRED ];
  // Service usage data
  oneof usage_data {
    // Management service usage data
    MgmtUsageData mgmt_usage_data = 5;
    // Connector service usage data
    ConnectorUsageData connector_usage_data = 6;
    // Model service usage data
    ModelUsageData model_usage_data = 7;
    // Pipeline service usage data
    PipelineUsageData pipeline_usage_data = 8;
  }
}

// CreateSessionRequest represents a request to create a new session
message CreateSessionRequest {
  // A session resource to create
  Session session = 1 [ (google.api.field_behavior) = REQUIRED ];
}
// CreateSessionResponse represents a response for a session response
message CreateSessionResponse {
  // A session resource
  Session session = 1;
}
// SendReportRequest represents a request to send a usage report
message SendSessionReportRequest {
  // A report resource to create
  SessionReport report = 1 [ (google.api.field_behavior) = REQUIRED ];
}
// SendReportResponse represents an empty response
message SendSessionReportResponse {}
