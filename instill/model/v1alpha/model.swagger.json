{
  "swagger": "2.0",
  "info": {
    "title": "instill/model/v1alpha/model.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ModelService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/__liveness": {
      "get": {
        "summary": "Liveness method receives a LivenessRequest message and returns a\nLivenessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "ModelService_Liveness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmodelv1alphaLivenessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "description": "Service name to check for its liveness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/__readiness": {
      "get": {
        "summary": "Readiness method receives a ReadinessRequest message and returns a\nReadinessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "ModelService_Readiness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmodelv1alphaReadinessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/health/model": {
      "get": {
        "summary": "Liveness method receives a LivenessRequest message and returns a\nLivenessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "ModelService_Liveness2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmodelv1alphaLivenessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "description": "Service name to check for its liveness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/models": {
      "get": {
        "summary": "CreateModel method receives a CreateModelRequest message and returns\na CreateModelResponse message.",
        "operationId": "ModelService_ListModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "ModelService"
        ]
      },
      "post": {
        "summary": "CreateModelByGitHub method receives a\nCreateModelByGitHubRequest message and returns a\nCreateModelByGitHubResponse message.",
        "operationId": "ModelService_CreateModelByGitHub",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaCreateModelByGitHubResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaCreateModelByGitHubRequest"
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/models/{model_name}/instances/{instance_name}": {
      "delete": {
        "summary": "DeleteModelInstance method receives a DeleteModelInstanceRequest message and\nreturns a DeleteModelInstanceResponse message.",
        "operationId": "ModelService_DeleteModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "model_name",
            "description": "Model name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_name",
            "description": "Model instance name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      },
      "patch": {
        "summary": "UpdateModelInstance method receives a UpdateModelInstanceRequest message and\nreturns a UpdateModelInstanceResponse message.",
        "operationId": "ModelService_UpdateModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUpdateModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "model_name",
            "description": "Model name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_name",
            "description": "Model instance name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/definitions/v1alphaModelInstanceStatus",
                  "title": "Model instance status"
                }
              },
              "title": "UpdateModelInstanceRequest represents a request to update a model instance"
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/models/{model_name}/instances/{instance_name}/outputs": {
      "post": {
        "summary": "TriggerModel method receives a TriggerModelRequest message and\nreturns a TriggerModelResponse message.",
        "operationId": "ModelService_TriggerModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaTriggerModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "model_name",
            "description": "Model name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "instance_name",
            "description": "Model instance name, default will be 'latest'",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/instillmodelv1alphaInput"
                  },
                  "title": "Input to the model",
                  "required": [
                    "inputs"
                  ]
                }
              },
              "title": "TriggerModelRequest represents a request to trigger a model",
              "required": [
                "inputs"
              ]
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/models/{name}": {
      "get": {
        "summary": "GetModel method receives a GetModelRequest message and returns\na GetModelResponse message.",
        "operationId": "ModelService_GetModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Model name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      },
      "delete": {
        "summary": "DeleteModel method receives a DeleteModelRequest message and returns\na DeleteModelResponse message.",
        "operationId": "ModelService_DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Model name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    }
  },
  "definitions": {
    "ModelDefinitionVisibility": {
      "type": "string",
      "enum": [
        "VISIBILITY_UNSPECIFIED",
        "VISIBILITY_PUBLIC",
        "VISIBILITY_PRIVATE"
      ],
      "default": "VISIBILITY_UNSPECIFIED",
      "description": "- VISIBILITY_UNSPECIFIED: Visibility: UNSPECIFIED\n - VISIBILITY_PUBLIC: Visibility: PUBLIC\n - VISIBILITY_PRIVATE: Visibility: PRIVATE",
      "title": "Model visibility including public or private"
    },
    "ModelInstanceTask": {
      "type": "string",
      "enum": [
        "TASK_UNSPECIFIED",
        "TASK_CLASSIFICATION",
        "TASK_DETECTION"
      ],
      "default": "TASK_UNSPECIFIED",
      "description": "- TASK_UNSPECIFIED: Task: UNSPECIFIED\n - TASK_CLASSIFICATION: Task: CLASSIFICATION\n - TASK_DETECTION: Task: DETECTION",
      "title": "Task enumerates the task type of a model instance"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "instillmodelv1alphaInput": {
      "type": "object",
      "properties": {
        "image_url": {
          "type": "string",
          "title": "Image type URL"
        },
        "image_base64": {
          "type": "string",
          "title": "Image type base64"
        }
      },
      "title": "Input represents the input to a model"
    },
    "instillmodelv1alphaLivenessResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1alphaLivenessResponseServingStatus",
          "title": "Status is the instance of the enum type ServingStatus"
        }
      },
      "title": "LivenessResponse represents a response for a service liveness status"
    },
    "instillmodelv1alphaReadinessResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1alphaReadinessResponseServingStatus",
          "title": "Status is the value of ServingStatus enum type"
        }
      },
      "title": "ReadinessResponse represents a response for a service readiness status"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "v1alphaConfiguration": {
      "type": "object",
      "properties": {
        "repo": {
          "type": "string",
          "title": "GitHub repository URL",
          "readOnly": true
        },
        "tag": {
          "type": "string",
          "title": "GitHub tag",
          "readOnly": true
        },
        "html_url": {
          "type": "string",
          "title": "Model description",
          "readOnly": true
        }
      },
      "title": "/////////////////////////////\nGitHub Model Spec represents a model spec data created from GitHub"
    },
    "v1alphaCreateModelBinaryFileUploadResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModelDefinition",
          "title": "A model instance"
        }
      },
      "title": "CreateModelBinaryFileUploadResponse represents a response for a model\ninstance"
    },
    "v1alphaCreateModelByGitHubRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Model name",
          "required": [
            "name"
          ]
        },
        "github": {
          "$ref": "#/definitions/v1alphaConfiguration",
          "title": "Model GitHub source"
        },
        "visibility": {
          "$ref": "#/definitions/ModelDefinitionVisibility",
          "title": "Model mode including public or private\nIf does not specify visibility, then default will be the same as the visibility of GitHub repository"
        }
      },
      "title": "CreateModelByGitHubRequest represents a request to create a model from a GitHub repo",
      "required": [
        "name"
      ]
    },
    "v1alphaCreateModelByGitHubResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModelDefinition",
          "title": "A model instance"
        }
      },
      "title": "CreateModelByGitHubResponse represents a response for a model\ninstance"
    },
    "v1alphaDeleteModelInstanceResponse": {
      "type": "object",
      "title": "DeleteModelInstanceResponse represents an empty response"
    },
    "v1alphaDeleteModelResponse": {
      "type": "object",
      "title": "DeleteModelResponse represents an empty response"
    },
    "v1alphaGetModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModelDefinition",
          "title": "A model instance"
        }
      },
      "title": "GetModelResponse represents a response for a model instance"
    },
    "v1alphaListModelResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaModelDefinition"
          },
          "title": "A list of models",
          "readOnly": true
        }
      },
      "title": "ListModelResponse represents a response for a list of models"
    },
    "v1alphaLivenessResponseServingStatus": {
      "type": "string",
      "enum": [
        "SERVING_STATUS_UNSPECIFIED",
        "SERVING_STATUS_SERVING",
        "SERVING_STATUS_NOT_SERVING"
      ],
      "default": "SERVING_STATUS_UNSPECIFIED",
      "description": "- SERVING_STATUS_UNSPECIFIED: Serving status: UNSPECIFIED\n - SERVING_STATUS_SERVING: Serving status: SERVING\n - SERVING_STATUS_NOT_SERVING: Serving status: NOT SERVING",
      "title": "ServingStatus enumerates the status of a queried service"
    },
    "v1alphaModelDefinition": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Model definition UUID",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Model definition name",
          "readOnly": true
        },
        "full_name": {
          "type": "string",
          "title": "Model definition full name (i.e., [user_name/org_name]/full_name)",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "title": "Model definition description",
          "readOnly": true
        },
        "source": {
          "$ref": "#/definitions/v1alphaModelDefinitionSource",
          "title": "Model definition source including 'local' or 'github' where model is imported from"
        },
        "configuration": {
          "$ref": "#/definitions/v1alphaConfiguration",
          "title": "Model definition configuration"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaModelInstance"
          },
          "title": "Model instance list",
          "readOnly": true
        },
        "visibility": {
          "$ref": "#/definitions/ModelDefinitionVisibility",
          "title": "Model visibility including public or private"
        },
        "owner": {
          "$ref": "#/definitions/v1alphaOwner",
          "title": "Model owner"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "Model created time",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "Model updated time",
          "readOnly": true
        }
      },
      "title": "/////////////////////////////////////////////////////////////////\nModelDefinition represents the definition of a model"
    },
    "v1alphaModelDefinitionSource": {
      "type": "string",
      "enum": [
        "SOURCE_UNSPECIFIED",
        "SOURCE_GITHUB",
        "SOURCE_LOCAL"
      ],
      "default": "SOURCE_UNSPECIFIED",
      "description": "- SOURCE_UNSPECIFIED: Source: UNSPECIFIED\n - SOURCE_GITHUB: Source: GITHUB\n - SOURCE_LOCAL: Source: LOCAL",
      "title": "Model source"
    },
    "v1alphaModelInstance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Model instance UUID",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "title": "Model instance name",
          "readOnly": true
        },
        "task": {
          "$ref": "#/definitions/ModelInstanceTask",
          "title": "Model instance task"
        },
        "configuration": {
          "$ref": "#/definitions/v1alphaConfiguration",
          "title": "Model instance configuration"
        },
        "status": {
          "$ref": "#/definitions/v1alphaModelInstanceStatus",
          "title": "Model instance status"
        },
        "model_definition_id": {
          "type": "string",
          "title": "Model definition id",
          "readOnly": true
        },
        "model_definition_name": {
          "type": "string",
          "title": "Model definition name",
          "readOnly": true
        },
        "model_definition_source": {
          "$ref": "#/definitions/v1alphaModelDefinitionSource",
          "title": "Model definition source"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "title": "Model instance created time",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "Model instance updated time",
          "readOnly": true
        }
      },
      "title": "ModelVersion represents the version of a model"
    },
    "v1alphaModelInstanceStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "STATUS_OFFLINE",
        "STATUS_ONLINE",
        "STATUS_ERROR"
      ],
      "default": "STATUS_UNSPECIFIED",
      "description": "- STATUS_UNSPECIFIED: Status: UNSPECIFIED\n - STATUS_OFFLINE: Status: OFFLINE\n - STATUS_ONLINE: Status: ONLINE\n - STATUS_ERROR: Status: ERROR",
      "title": "Status enumerates the status of a model instance"
    },
    "v1alphaOwner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Owner uuid",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "title": "Owner username",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "title": "Owner type",
          "readOnly": true
        }
      },
      "title": "/////////////////////////////\nModel owner"
    },
    "v1alphaReadinessResponseServingStatus": {
      "type": "string",
      "enum": [
        "SERVING_STATUS_UNSPECIFIED",
        "SERVING_STATUS_SERVING",
        "SERVING_STATUS_NOT_SERVING"
      ],
      "default": "SERVING_STATUS_UNSPECIFIED",
      "description": "- SERVING_STATUS_UNSPECIFIED: Serving status: UNSPECIFIED\n - SERVING_STATUS_SERVING: Serving status: SERVING\n - SERVING_STATUS_NOT_SERVING: Serving status: NOT SERVING",
      "title": "ServingStatus enumerates the status of a queried service"
    },
    "v1alphaTriggerModelBinaryFileUploadResponse": {
      "type": "object",
      "properties": {
        "output": {
          "type": "object",
          "title": "Output from a model",
          "readOnly": true
        }
      },
      "title": "TriggerModelBinaryFileUploadResponse represents a response for the output of\na model"
    },
    "v1alphaTriggerModelResponse": {
      "type": "object",
      "properties": {
        "output": {
          "type": "object",
          "title": "Output from a model",
          "readOnly": true
        }
      },
      "title": "TriggerModelResponse represents a response for the output of a model"
    },
    "v1alphaUpdateModelInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1alphaModelInstance",
          "title": "A model instance"
        }
      },
      "title": "UpdateModelInstanceResponse represents a response for a model instance"
    }
  }
}
